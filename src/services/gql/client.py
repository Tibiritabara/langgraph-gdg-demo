# Generated by ariadne-codegen
# Source: ./src/queries/

from typing import Any, Dict, List, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .enums import IssueState, PullRequestState
from .get_repo_commits import GetRepoCommits
from .get_repo_issues import GetRepoIssues
from .get_repo_pull_requests import GetRepoPullRequests


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def get_repo_issues(
        self,
        owner: str,
        name: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        state: Union[Optional[List[IssueState]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetRepoIssues:
        query = gql(
            """
            query GetRepoIssues($owner: String!, $name: String!, $limit: Int, $state: [IssueState!]) {
              repository(owner: $owner, name: $name) {
                issues(
                  first: $limit
                  states: $state
                  orderBy: {direction: DESC, field: UPDATED_AT}
                ) {
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                  edges {
                    node {
                      title
                      url
                      state
                      stateReason
                      createdAt
                      updatedAt
                      comments {
                        totalCount
                      }
                      labels(first: 5) {
                        edges {
                          node {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "owner": owner,
            "name": name,
            "limit": limit,
            "state": state,
        }
        response = self.execute(
            query=query, operation_name="GetRepoIssues", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetRepoIssues.model_validate(data)

    def get_repo_commits(
        self,
        owner: str,
        name: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetRepoCommits:
        query = gql(
            """
            query GetRepoCommits($owner: String!, $name: String!, $limit: Int) {
              repository(owner: $owner, name: $name) {
                defaultBranchRef {
                  target {
                    __typename
                    ... on Commit {
                      history(first: $limit) {
                        edges {
                          node {
                            ... on Commit {
                              committedDate
                              authoredDate
                              author {
                                name
                              }
                              message
                              committer {
                                name
                              }
                              changedFilesIfAvailable
                              additions
                              deletions
                              status {
                                state
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"owner": owner, "name": name, "limit": limit}
        response = self.execute(
            query=query, operation_name="GetRepoCommits", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetRepoCommits.model_validate(data)

    def get_repo_pull_requests(
        self,
        owner: str,
        name: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        state: Union[Optional[List[PullRequestState]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetRepoPullRequests:
        query = gql(
            """
            query GetRepoPullRequests($owner: String!, $name: String!, $limit: Int, $state: [PullRequestState!]) {
              repository(owner: $owner, name: $name) {
                pullRequests(
                  states: $state
                  first: $limit
                  orderBy: {direction: DESC, field: UPDATED_AT}
                ) {
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                  totalCount
                  nodes {
                    ... on PullRequest {
                      mergedAt
                      title
                      createdAt
                      updatedAt
                      additions
                      deletions
                      commits {
                        totalCount
                      }
                      labels(first: 5) {
                        edges {
                          node {
                            name
                          }
                        }
                      }
                      body
                      url
                      comments {
                        totalCount
                      }
                      reviews {
                        totalCount
                      }
                      mergedBy {
                        __typename
                        login
                      }
                      author {
                        __typename
                        login
                      }
                      state
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "owner": owner,
            "name": name,
            "limit": limit,
            "state": state,
        }
        response = self.execute(
            query=query,
            operation_name="GetRepoPullRequests",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetRepoPullRequests.model_validate(data)
